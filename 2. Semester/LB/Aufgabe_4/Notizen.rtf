{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
InOrder-Travesierung:
\b0  Bei der InOrder-Travesierung besuchen wir den linken Teilbaum, dann die Wurzel und dann den rechten Teilbaum.\
\
\
statt nil null benutzen?\
\
is_sbin_tree(Tree) :-\'a0\
\
insert_sbin_tree(Elem, t(V,L,R), Newtree) :-\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0Elem >= V, insert_sbin_tree(Elem,R,NR),\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0Newtree = T(V,L,NR);\
\'a0 \'a0 \'a0 \'a0 \'a0 ELEM < V, insert_sbin_tree(Elem,L,NL), Newtree = t(V,NL,R).\
\
\
Bei 4. keine geschachtelten Listen (!).\'a0\
\
Teil 2:\
Um die Impl. zu vereinfachen:\'a0\
simplefield(impl(X,Y),or(mnot(NX),NY) ) :- simplefield(X,NX), simplefield(Y,NY).\
\
Bei AND aufpassen, nicht ignorieren:\'a0\
simplefield(and(X,Y),and(nX,NY)) :- simplefield(X,NX), simplefield(Y,NY).\
\
nnf(mnot(and(X,Y)),or(NX,NY)) :- nnf(mnot(X),NX), nnf(mnot(Y),NY).\
\

\b is_clause
\b0 : Eine Klausel ist eine Disjunktion von Literalen.\'a0\
Bei 5: maximal 1 positives Literal\
}